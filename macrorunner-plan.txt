-> Create the API:
	- access and modify text
		- test
	- create new text objects where we can output new stuff
		- vscode api text editor edit not possible on closed editors
			- try doing edit in the then callback
				- it worked.
	- ability to mark undo points
		- Test
		
	- mitigate infinite loops (yes this happened)
		- nothing can be done about them. I will make the program print a warning if it detects the word "while\(.+\)" somewhere in the code, and how they should start up task manager and end visual studio since there is no other known way to mitgate against them. I've also added some more code to make it a little smart, like regex that removes single/multiline comments, "'` strings and /regex/ objects before doing the check, but yeah
			-* unit tests
			
		-* Investigate another thread + pthread_kill
	
	-* Selection manipulation
		-* getEditorSelection
		-* 

		-* positions = file.insert(positions, contents)
		-* positions = file.prev(positions, "^")
		
		
		-* regex escape
		-* batch insert - array of positions, array of text
			- return a new array of positions, modifying the text is modifying the cursor position as well adn my current approach doesn't know abt this
		-* 

	-* a way to push the output while it's running. 
		[i] would enable ascii animating
	
	-* dont spam outputs	
	-* harder utils:
		-* reverse regex

-* Add Testing
	-* unit tests for all main features

-* Breakpoint debugging? could be a VS code functionality


 
-------------- test text

// macro
// Find documentation about the injected objects here: https://github.com/El-Tejaso/macrorunner

const file = context.getFile();
let text = `${file.getText()}`; // autocomplete purposes. I don't know how to inject autocomplete just yet

// Make your modifications here



context.loop(100, () => {
  asod;fa;djlsfk

  return true;
})



        